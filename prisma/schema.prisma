// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enum ---
enum RoleEnum {
  super_admin
  admin
  user
}

// --- Core User Table ---
model User {
  user_id       String @id @default(uuid())
  password      String // hashed password generated by backend
  first_name    String
  last_name     String
  email_address String @unique(map: "User_email_address_key")

  // one-to-one
  authenLog    AuthenLog?
  userMetaData MetaData[]
  Employee     Employee? // receive by user input
  Personal     Personal? // receive by user input

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  UserRole UserRole[] // many-to-many relationship with Role

  createdMetaData  MetaData[] @relation("MetaDataCreatedBy") // เปลี่ยนชื่อ field
  modifiedMetaData MetaData[] @relation("MetaDataModifiedBy") // เปลี่ยนชื่อ field
}

// --- Authentication Log ---
model AuthenLog {
  authenLog_id            String   @id @default(uuid())
  user                    User     @relation(fields: [user_id], references: [user_id])
  user_id                 String   @unique
  lastLogin_date          DateTime
  lastPassword_changeDate DateTime?
}

// --- User Metadata ---
model MetaData {
  meta_id                  String   @id @default(uuid())
  user                     User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade) // เชื่อมโยงไปยัง User
  user_id                  String
  start_date               DateTime
  end_date                 DateTime
  status                   String   @default("active")
  is_admin                 Boolean  @default(false)
  created_by               User?     @relation("MetaDataCreatedBy", fields: [created_by_user_id], references: [user_id]) // เชื่อมโยงไปยัง User
  created_by_user_id       String? // foreign key field
  created_date             DateTime @default(now())
  last_modified_by         User?     @relation("MetaDataModifiedBy", fields: [last_modified_by_user_id], references: [user_id]) // เชื่อมโยงไปยัง User
  last_modified_by_user_id String? // foreign key field
  last_modified_date       DateTime @updatedAt
}

// --- Employee Details ---
model Employee {
  employee_id String @id @default(uuid())
  user        User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id     String @unique

  department    Department @relation(fields: [department_id], references: [department_id])
  department_id String

  job_title    JobTitle @relation(fields: [job_title_id], references: [job_title_id])
  job_title_id String
}

// --- Personal Details ---
model Personal {
  personal_id   String   @id @default(uuid())
  user          User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id       String   @unique
  id_card       String   @unique
  phone_number  String   @unique
  date_of_birth DateTime
  gender        String?
}

// --- Department ---
model Department {
  department_id   String     @id @default(uuid())
  employees       Employee[] // one-to-many
  department_name String     @unique
}

// --- Job Title ---
model JobTitle {
  job_title_id   String     @id @default(uuid())
  employees      Employee[]
  job_title_name String     @unique
}

// --- Role ---
model Role {
  role_id     String     @id @default(uuid())
  role_name   RoleEnum   @unique @default(user)
  description String
  UserRole    UserRole[]
}

// -*- Joint Table -*-
model UserRole {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id String
  role    Role   @relation(fields: [role_id], references: [role_id])
  role_id String

  @@unique([user_id, role_id]) // user มีหลาย role ได้
}
